;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_Text_Position
	.export		_test
	.export		_nPalette
	.export		_state
	.export		_TEXT
	.export		_TEXT2
	.export		_Text_dim
	.export		_PALETTE
	.export		_Attrib_Table
	.export		_All_Off
	.export		_All_On
	.export		_Load_Palette
	.export		_Reset_Scroll
	.export		_Load_Text
	.export		_Change_Atrib_table
	.export		_Ajusta_Pantalla
	.export		_main

.segment	"DATA"

_Text_dim:
	.byte	$10

.segment	"RODATA"

_TEXT:
	.byte	$30,$30,$31,$31,$30,$30,$31,$31,$30,$30,$31,$31,$30,$30,$31,$31
	.byte	$00
_TEXT2:
	.byte	$32,$32,$33,$33,$32,$32,$33,$33,$32,$32,$33,$33,$32,$32,$33,$33
	.byte	$00
_PALETTE:
	.byte	$0F
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$1A
_Attrib_Table:
	.byte	$E4
	.byte	$72
	.byte	$1B
	.byte	$8D

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_Text_Position:
	.res	1,$00
.segment	"BSS"
_test:
	.res	1,$00
_nPalette:
	.res	1,$00
_state:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L0130:	lda     _index
	cmp     #$10
	bcs     L0131
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L0130
;
; PPU_ADDRESS = 0x23;
;
L0131:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xda;
;
	lda     #$DA
	sta     $2006
;
; for( index = 0; index < sizeof(Attrib_Table); ++index ){
;
	lda     #$00
	sta     _index
L0132:	lda     _index
	cmp     #$04
	bcs     L0045
;
; PPU_DATA = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for( index = 0; index < sizeof(Attrib_Table); ++index ){
;
	inc     _index
	jmp     L0132
;
; }
;
L0045:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Text: near

.segment	"CODE"

;
; if (Text_Position < Text_dim){
;
	ldx     #$00
	lda     _Text_Position
	cmp     _Text_dim
	txa
	bcs     L013B
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x88 + Text_Position; //  one line down = add 0x20 to the low bit
;
	lda     _Text_Position
	clc
	adc     #$88
	sta     $2006
;
; PPU_DATA = TEXT[Text_Position];
;
	ldy     _Text_Position
	lda     _TEXT,y
	sta     $2007
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xa8 + Text_Position; //  one line down = add 0x20 to the low bit
;
	lda     _Text_Position
	clc
	adc     #$A8
	sta     $2006
;
; PPU_DATA = TEXT[Text_Position];
;
	ldy     _Text_Position
	lda     _TEXT,y
	sta     $2007
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xc8 + Text_Position; //  about the middle of the screen 21d0
;
	lda     _Text_Position
	clc
	adc     #$C8
	sta     $2006
;
; PPU_DATA = TEXT2[Text_Position];
;
	ldy     _Text_Position
	lda     _TEXT2,y
	sta     $2007
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xe8 + Text_Position; //  one line down = add 0x20 to the low bit
;
	lda     _Text_Position
	clc
	adc     #$E8
	sta     $2006
;
; PPU_DATA = TEXT2[Text_Position];
;
	ldy     _Text_Position
	lda     _TEXT2,y
	sta     $2007
;
; ++Text_Position;  
;
	inc     _Text_Position
;
; else {
;
	rts
;
; Text_Position = 0;
;
L013B:	sta     _Text_Position
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x88; //  una linea abajo = sumar 0x20 a los bits mas bajos
;
	lda     #$88
	sta     $2006
;
; for ( index = 0; index < Text_dim; ++index ){
;
	stx     _index
L0134:	lda     _index
	cmp     _Text_dim
	txa
	sbc     #$00
	bcs     L0135
;
; PPU_DATA = 32;  //  borra el texto con el tile #32 
;
	lda     #$20
	sta     $2007
;
; for ( index = 0; index < Text_dim; ++index ){
;
	inc     _index
	jmp     L0134
;
; PPU_ADDRESS = 0x21;
;
L0135:	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xa8; //  una linea abajo = sumar 0x20 a los bits mas bajos
;
	lda     #$A8
	sta     $2006
;
; for ( index = 0; index < Text_dim; ++index ){
;
	lda     #$00
	sta     _index
L0136:	lda     _index
	cmp     _Text_dim
	txa
	sbc     #$00
	bcs     L0137
;
; PPU_DATA = 32;  //  borra el texto con el tile #32 
;
	lda     #$20
	sta     $2007
;
; for ( index = 0; index < Text_dim; ++index ){
;
	inc     _index
	jmp     L0136
;
; PPU_ADDRESS = 0x21;
;
L0137:	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xc8;
;
	lda     #$C8
	sta     $2006
;
; for ( index = 0; index < Text_dim; ++index ){
;
	lda     #$00
	sta     _index
L0138:	lda     _index
	cmp     _Text_dim
	txa
	sbc     #$00
	bcs     L0139
;
; PPU_DATA = 32;  //  borra el texto con el tile #32 
;
	lda     #$20
	sta     $2007
;
; for ( index = 0; index < Text_dim; ++index ){
;
	inc     _index
	jmp     L0138
;
; PPU_ADDRESS = 0x21;
;
L0139:	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xe8;
;
	lda     #$E8
	sta     $2006
;
; for ( index = 0; index < Text_dim; ++index ){
;
	lda     #$00
	sta     _index
L013A:	lda     _index
	cmp     _Text_dim
	txa
	sbc     #$00
	bcs     L00FF
;
; PPU_DATA = 32;  //  borra el texto con el tile #32 
;
	lda     #$20
	sta     $2007
;
; for ( index = 0; index < Text_dim; ++index ){
;
	inc     _index
	jmp     L013A
;
; }
;
L00FF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Change_Atrib_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Change_Atrib_table: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xda;
;
	lda     #$DA
	sta     $2006
;
; PPU_DATA =  Attrib_Table[nPalette];
;
	ldy     _nPalette
	lda     _Attrib_Table,y
	sta     $2007
;
; ++nPalette;
;
	inc     _nPalette
;
; if (nPalette>= sizeof(Attrib_Table))
;
	lda     _nPalette
	cmp     #$04
	bcc     L0116
;
; nPalette=0;
;
	lda     #$00
	sta     _nPalette
;
; }
;
L0116:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Ajusta_Pantalla (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Ajusta_Pantalla: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x40;
;
	lda     #$40
	sta     $2006
;
; for ( index = 0; index < 255; ++index ){
;
	lda     #$00
	sta     _index
L013C:	lda     _index
	cmp     #$FF
	bcs     L013D
;
; PPU_DATA = 32;  //  borra el texto con el tile #32 
;
	lda     #$20
	sta     $2007
;
; for ( index = 0; index < 255; ++index ){
;
	inc     _index
	jmp     L013C
;
; PPU_DATA = 32;
;
L013D:	lda     #$20
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off();     // Apaga la pantalla
;
	jsr     _All_Off
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Ajusta_Pantalla();
;
	jsr     _Ajusta_Pantalla
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; state=0;
;
	lda     #$00
	sta     _state
;
; test=0;
;
	sta     _test
;
; nPalette=0;
;
	sta     _nPalette
;
; All_On();//  Enciende la pantalla
;
	jsr     _All_On
;
; while (NMI_flag == 0);  //  esperar hasta la interrupciÃ³n NMI
;
L013F:	lda     _NMI_flag
	beq     L013F
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; if (Frame_Count == 10){ //  30 frames = 0.5 seconds
;
	lda     _Frame_Count
	cmp     #$0A
	bne     L013F
;
; if (state == 0){
;
	lda     _state
	bne     L0077
;
; Load_Text();
;
	jsr     _Load_Text
;
; } else{
;
	jmp     L007A
;
; Change_Atrib_table();
;
L0077:	jsr     _Change_Atrib_table
;
; ++state;
;
	inc     _state
;
; ++test;  //  dummy, just making sure this compiles into the BSS section 0x300
;
L007A:	inc     _test
;
; if (  Text_Position == Text_dim && state == 0)//& test>= 
;
	lda     _Text_dim
	cmp     _Text_Position
	bne     L0142
	lda     _state
	bne     L0142
;
; state=1;
;
	lda     #$01
	sta     _state
;
; if (state>= 12){
;
L0142:	lda     _state
	cmp     #$0C
	bcc     L0084
;
; state=0;
;
	lda     #$00
	sta     _state
;
; nPalette=0;
;
	sta     _nPalette
;
; Change_Atrib_table();
;
	jsr     _Change_Atrib_table
;
; Reset_Scroll();
;
L0084:	jsr     _Reset_Scroll
;
; Frame_Count = 0;
;
	lda     #$00
	sta     _Frame_Count
;
; while (1){     //  loop infinito
;
	jmp     L013F

.endproc

